{
  "topics": [
    {
      "name": "Testing",
      "wisdoms": [
        {
          "id": "1",
          "text": "Поспешишь — QA-ев насмешишь!"
        },
        {
          "id": "2",
          "text": "Под лежачий прод бабло не течёт!"
        }
      ],
      "levels": [
        {
          "filename": "onboarding.py",
          "wisdoms": [
            "1",
            "2"
          ],
          "blocks": [
            {
              "type": "text",
              "text": "def foo():\n    print(42)\n\n"
            },
            {
              "type": "replace",
              "text": "def bar():\n    print(\"Hello bar!\")\n",
              "replacement": "def greet_user():\n    print(\"Hello\")\n",
              "event": "32905ebf-0f1d-43eb-aca4-3350e85165a0",
              "clickable": "bar",
              "explanation": "No Foos!"
            },
            {
              "type": "text",
              "text": "\n"
            },
            {
              "type": "replace",
              "text": "def BAD_CODE():\n    print(\"BAD\")\n",
              "replacement": "",
              "event": "BAD_CODE",
              "explanation": "Do not write bad code!"
            },
            {
              "type": "text",
              "text": "\n"
            },
            {
              "type": "replace-on",
              "text": "",
              "replacement": "def GOOD_CODE():\n    print(\"ABSOLUTELY GOOD CODE!\")\n",
              "event": "BAD_CODE"
            },
            {
              "type": "replace-span",
              "clickable": "foo",
              "replacement": "nonfoo",
              "event": "b6f0ba34-e669-4533-9635-d03586524c49",
              "explanation": "no foos",
              "hint": "Look at foo!"
            },
            {
              "type": "text",
              "text": "\n"
            },
            {
              "type": "replace-span",
              "clickable": "42",
              "replacement": "the_answer",
              "event": "e42",
              "explanation": "no magic constants!",
              "hint": "42 = 6 * 8"
            }
          ],
          "chat": {
            "buddy": "This is a test level"
          }
        }
      ]
    },
    {
      "name": "Naming",
      "wisdoms": [
        {
          "id": "naming-good-names",
          "text": "Use descriptive names that convey intent."
        },
        {
          "id": "no-abbr",
          "text": "Don't use abbreviations unless they are well-known."
        },
        {
          "id": "sign-is-doc",
          "text": "Function arguments are documentation. Use meaningful names!"
        }
      ],
      "levels": [
        {
          "filename": "onboarding.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef main():\n    BaD_VAriABLE_NAME = \"Hello!\"\n    print(BaD_VAriABLE_NAME)\n"
            },
            {
              "type": "replace-span",
              "clickable": "BaD_VAriABLE_NAME",
              "replacement": "greeting",
              "event": "2772888b-88aa-499d-8e5b-81834a4b02d1",
              "explanation": "Names should be meaningfull",
              "hint": "Click on bad variable name!"
            }
          ],
          "chat": {
            "buddy": "Hello, Junior!\nAccording to our team process, you are not yet allowed to write code. So, you can only review a code of your colleagues and fix some small and not significant details.\n\nLet's train you a little. Look at this terrible variable name. Click to fix it!",
            "reply": "Ok"
          }
        },
        {
          "filename": "temperature.py",
          "wisdoms": [
            "no-abbr",
            "sign-is-doc"
          ],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef fmt_temp(idx, tt):\n    dnms = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    return \"Temperature for \" + dnms[idx] + \" is \" + str(tt) + \"° C\"\n"
            },
            {
              "type": "replace-span",
              "clickable": "idx",
              "replacement": "day_of_week",
              "event": "9ceab293-509f-48fc-875f-cd493008c2cf",
              "explanation": "Argument name is a part of code documentation. It is important to make it meaningful",
              "hint": "$sign-is-doc"
            },
            {
              "type": "replace-span",
              "clickable": "tt",
              "replacement": "temperature",
              "event": "3ade6ad8-262e-4779-a762-6f1af50fc15a",
              "explanation": "$no-abbr",
              "hint": "$sign-is-doc"
            },
            {
              "type": "replace-span",
              "clickable": "dnms",
              "replacement": "day_names",
              "event": "4483864b-b6ca-4395-b047-bb3e02a62927",
              "explanation": "Vowels are happy now!",
              "hint": "Do you wnt hnts? yrwlcm!"
            },
            {
              "type": "replace-span",
              "clickable": "fmt_temp",
              "replacement": "format_temperature",
              "event": "15556ea7-61d4-48c7-9410-9a41314447b0",
              "explanation": "Is temp for temporary?",
              "hint": "$sign-is-doc"
            }
          ],
          "chat": {
            "buddy": "Okay, you are ready to some real work.\nCheck if this code is easy to understand."
          }
        },
        {
          "filename": "cells.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "def get(lst):\n    lst1 = []\n    for c in lst:\n        if c.is_empty: \n            lst1.Add(c.position)\n    return lst1\n\nlst = read_cells(\"cells.csv\")\nprint(get(lst))\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "get",
              "replacement": "get_empty_positions",
              "event": "10daba97-a233-41c2-90ea-720dfdba4061",
              "explanation": "Function name should describe what it does",
              "hint": "What does this function actually return?"
            },
            {
              "type": "replace-span",
              "clickable": "lst1",
              "replacement": "empty_positions",
              "event": "f2ab8c3f-6c84-4e01-bf97-39c4c46da519",
              "explanation": "Use descriptive variable names",
              "hint": "What does this list store?"
            },
            {
              "type": "replace-span",
              "clickable": "lst",
              "replacement": "cells",
              "event": "0b804bfb-67f8-4f98-a9be-7e00ff12c661",
              "explanation": "Use descriptive variable names",
              "hint": "What does this list contain?"
            },
            {
              "type": "replace-span",
              "clickable": "c",
              "replacement": "cell",
              "event": "4b9b2d1b-ab76-40fb-8b95-ef97715bb87e",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does each item in the list represent?"
            },
            {
              "type": "text",
              "text": "\n"
            }
          ],
          "chat": {
            "buddy": "Nice work! After your fixes code becomes much more readable. \nAnd this piece of code is really short and simple.\nNot sure if it needs any changes."
          }
        },
        {
          "filename": "views.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef get_views_per_second(views, date):\n"
            },
            {
              "type": "replace-on",
              "event": "MAGIC",
              "text": "",
              "replacement": "    n = 24 * 60 * 60\n"
            },
            {
              "type": "text",
              "text": "    daily_views = sum(1 for v in views if v.date == date)\n    return daily_views / 86400\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "86400",
              "replacement": "(24*60*60)",
              "event": "6afd6219-4243-40ee-98c1-e9e53795a003",
              "explanation": "Magic numbers make code harder to understand",
              "hint": "What does this number represent?"
            },
            {
              "type": "replace-span",
              "clickable": "(24*60*60)",
              "replacement": "n",
              "event": "MAGIC",
              "explanation": "Constant should have name",
              "hint": "Why stop here?!"
            },
            {
              "type": "replace-span",
              "clickable": "n",
              "replacement": "seconds_in_24h",
              "event": "78206ffc-65fe-47a4-b03f-813a21365b62",
              "explanation": "Variable names should be descriptive",
              "hint": "What does this variable represent?"
            },
            {
              "type": "text",
              "text": "\n"
            }
          ],
          "chat": {
            "buddy": "Do not change any constants here! They are magically calculated.\nNobody knows how, but everything works perfectly."
          }
        },
        {
          "filename": "contains.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef contains(text, pattern):\n    l = len(pattern)\n    for i in range(len(text)):\n        if text[i:i+1] == pattern:\n            return True\n    return False\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "l",
              "replacement": "pattern_len",
              "event": "63f6e36b-23ea-46d5-ac44-fe5c05a6d6ed",
              "explanation": "Hint for the future: never use lowercase 'l' as a variable name!",
              "hint": "What does this variable represent?"
            },
            {
              "type": "replace-span",
              "clickable": "i+1",
              "replacement": "i+l",
              "event": "d7255c8f-9dc2-4560-9c3b-cf88e84f04ef",
              "explanation": "This is a bug! We need to use the pattern length, not just 1 character",
              "hint": "How many characters should we compare?"
            },
            {
              "type": "text",
              "text": "\n"
            }
          ],
          "chat": {
            "buddy": "Uhh.. Can't find a bug here... Can you help me a little?",
            "reply": "Let's find it!"
          }
        },
        {
          "filename": "unescape.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef unescape(s):\n    ss = \"\"\n    flag = False\n    for c in s:\n        if flag and c == 'n':\n            ss += '\\n'\n        elif flag and c == 't':\n            ss += '\\t'\n        elif flag and c == '\\\\':\n            ss += '\\\\'\n        elif c == '\\\\':\n            flag = True\n        else:\n            ss += c\n    return ss\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "flag",
              "replacement": "after_slash",
              "event": "cd78943e-2af8-4eb0-be08-416f5dca75a3",
              "explanation": "Variable names should describe their purpose, not just their type",
              "hint": "What does this boolean flag actually indicate?"
            },
            {
              "type": "replace-span",
              "clickable": "ss",
              "replacement": "unescaped",
              "event": "2733892a-a459-4ed8-9691-46a69fd0eb82",
              "explanation": "Single-letter variable names (or duplicates like 'ss') are rarely descriptive",
              "hint": "What does this string contain?"
            },
            {
              "type": "replace-span",
              "clickable": "s",
              "replacement": "escaped",
              "event": "37c5a98b-533b-4fe0-86ff-4d3c252f36d1",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "text",
              "text": "\n"
            }
          ],
          "chat": {
            "buddy": "1. If a variable stores string, it is 's'.\n2. If it stores a boolean, it is 'flag'.\n3. However, sometimes one also need 's1', 's2', etc.\n4. But I personally prefer 'ss', 'sss', etc. Brilliant, isn't it?"
          }
        },
        {
          "filename": "discount.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef is_discount_hunter(customer):\n    flag = True\n    for order in customer.orders:\n        flag2 = False\n        for item in order.items:\n            if item.product.discount > 0:\n                flag2 = True\n        flag = flag and flag2\n    return flag\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "flag",
              "replacement": "every_order_has_discounted_item",
              "event": "2e4a65f0-ef01-4780-9c79-36c338225ea4",
              "explanation": "Variable names should describe their purpose, not just their type",
              "hint": "What does this boolean flag actually track?"
            },
            {
              "type": "replace-span",
              "clickable": "flag2",
              "replacement": "has_discount",
              "event": "7e33abb7-624e-41ba-b601-29d660d2f454",
              "explanation": "Numbered variables (flag2) are rarely descriptive",
              "hint": "What does this boolean flag indicate about the order?"
            },
            {
              "type": "text",
              "text": "\n"
            }
          ],
          "chat": {
            "buddy": "If we have already 'flag' and we need the second one, how should we name it? flag1 or flag2? What is your favorite?"
          }
        },
        {
          "filename": "bigrams.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef GetBigramsFrequency(ws):\n    bigramsCount = len(ws) - 1\n    bigramsfrequency = {}\n    for I in range(bigramsCount):\n        bg = ws[I] + ' ' + ws[I + 1]\n        if bg in bigramsfrequency:\n            bigramsfrequency[bg] += 1\n        else:\n            bigramsfrequency[bg] = 1\n    return bigramsfrequency\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "GetBigramsFrequency",
              "replacement": "get_bigrams_frequency",
              "event": "0004d7b2-67a6-41ec-b7b3-5d668d0dd87f",
              "explanation": "Python functions should use snake_case naming style",
              "hint": "Function names in Python should be lowercase with underscores"
            },
            {
              "type": "replace-span",
              "clickable": "bigramsCount",
              "replacement": "bigrams_count",
              "event": "2bec504c-6dde-42e4-9396-8ad520bb6a55",
              "explanation": "Python variables should use snake_case naming style",
              "hint": "Variable names in Python should be lowercase with underscores"
            },
            {
              "type": "replace-span",
              "clickable": "I",
              "replacement": "i",
              "event": "e419228d-61e4-4148-9628-b426329760b7",
              "explanation": "Single-letter variables should be lowercase",
              "hint": "Loop counters are typically lowercase"
            },
            {
              "type": "replace-span",
              "clickable": "ws",
              "replacement": "words",
              "event": "2a74456e-80ce-4f11-9e38-c894e07ebbeb",
              "explanation": "Variable names should be descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "bg",
              "replacement": "bigram",
              "event": "e851ce9c-4b5d-4525-af73-c3d4d31650fa",
              "explanation": "Avoid abbreviations unless they are well-known",
              "hint": "What does this variable represent?"
            },
            {
              "type": "replace-span",
              "clickable": "bigramsfrequency",
              "replacement": "bigrams_frequency",
              "event": "6cefa89d-337d-4fbb-afa0-1798f8b84c84",
              "explanation": "Python variables should use snake_case naming style",
              "hint": "Variable names in Python should be lowercase with underscores"
            },
            {
              "type": "text",
              "text": "\n"
            }
          ],
          "chat": {
            "buddy": "Anders and Nicolaus wrote this code. Their naming style is a little bit non typical for python..."
          }
        },
        {
          "filename": "copy.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef copy(xs, ys, j, k, n):\n    \"\"\"Copy elements from ys to xs\n\n    Args:\n        xs - destination\n        ys - source\n        j - start index in xs\n        k - start index in ys\n        n - number of elements to copy\n    \"\"\"\n    for i in range(n):\n        xs[j+i] = ys[k+i]\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "xs",
              "replacement": "destination",
              "event": "bfc59711-258f-4738-8b81-b5cc97cb7ff9",
              "explanation": "Variable names should be descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "ys",
              "replacement": "source",
              "event": "ade7fdd7-10a4-4edd-ae59-0da5fb60fae7",
              "explanation": "Variable names should be descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "j",
              "replacement": "dest_start",
              "event": "93498025-bb11-43fc-b052-bbd5630790f7",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "k",
              "replacement": "src_start",
              "event": "0d584bdf-e4f9-4c8b-ad91-5a9ea3d3aae3",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "n",
              "replacement": "count",
              "event": "771bcbe0-82ff-49b8-839d-654d47e9f1e3",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "text",
              "text": "\n"
            }
          ],
          "chat": {
            "buddy": "Huh, somebody wrote documentation for their code?! Weakling! Real coders don't read or write docs. They read and write CODE!"
          }
        },
        {
          "filename": "board.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef initialization(board_json):\n    n = board_json['size']\n    board = creating_board(n, n)\n    board_reader(board_json, board)\n\n# Hint for the future: functions = verbs, variables = nouns.\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "n",
              "replacement": "board_size",
              "event": "740c85c2-bad8-49fc-94e3-36f3332408ea",
              "explanation": "Variable names should be descriptive",
              "hint": "What does this variable represent?"
            },
            {
              "type": "replace-span",
              "clickable": "initialization",
              "replacement": "initialize_board",
              "event": "8c907424-3d57-4b61-8240-a0ff3d700d25",
              "explanation": "Function names should be verbs",
              "hint": "What action does this function perform?"
            },
            {
              "type": "replace-span",
              "clickable": "creating_board",
              "replacement": "create_board",
              "event": "23367ce8-ea8c-4a0f-a526-6258a5a4f61b",
              "explanation": "Function names should be verbs, not gerunds",
              "hint": "Use the imperative form for function names"
            },
            {
              "type": "replace-span",
              "clickable": "board_reader",
              "replacement": "read_board",
              "event": "6f20d5ec-9b1f-42fa-99a0-fff6c8a7618c",
              "explanation": "Function names should be verbs",
              "hint": "What action does this function perform?"
            },
            {
              "type": "text",
              "text": "\n"
            }
          ],
          "chat": {
            "buddy": "It is simple: \n'initialization' consists of 'creating a board' and filling it with the 'board_reader'!"
          }
        },
        {
          "filename": "final.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef InstructionParser(i):\n    Instructions = []\n    F = False\n    for l in i.splitlines():\n        if l.startswith(\"BEGIN\"):\n            F = True\n        if not F:\n            continue\n        if l.startswith(\"END\"):\n            F = False\n        elif l.startswith(\"replace \"):\n            rest = l[8:]\n            old, new = rest.split(\" with \")\n            Instructions.append((\"replace\", old, new))\n        elif l.startswith(\"add \"):\n            rest = l[4:]\n            Instructions.append((\"add\", rest))    \n        else:\n            raise Exception(\"Unknown instruction in line: \" + l)\n    return Instructions\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "InstructionParser",
              "replacement": "parse_instructions",
              "event": "960590f7-05a7-4dba-ba3f-88ba9e9b18c7",
              "explanation": "Function names should be verbs and use snake_case in Python",
              "hint": "What does this function actually do?"
            },
            {
              "type": "replace-span",
              "clickable": "Instructions",
              "replacement": "instructions",
              "event": "27e52662-1463-4140-9776-b0fd19be8d67",
              "explanation": "Variable names should use snake_case in Python",
              "hint": "Consistent naming conventions make code more readable"
            },
            {
              "type": "replace-span",
              "clickable": "F",
              "replacement": "inside_begin_end",
              "event": "a346735b-602b-4529-b0ee-45b81c933382",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this boolean flag actually indicate?"
            },
            {
              "type": "replace-span",
              "clickable": "l",
              "replacement": "line",
              "event": "93ba2d3e-2458-4222-948f-033668bc773e",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does each item in the loop represent?"
            },
            {
              "type": "replace-span",
              "clickable": "i",
              "replacement": "instructions_text",
              "event": "dc54d4c9-9e9c-450a-8059-1bfb88abd6c9",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "4:",
              "replacement": "len(\"add \"):",
              "event": "54018e48-bd83-45fc-8c01-eacf759a8e5f",
              "explanation": "Magic numbers should be replaced with meaningful expressions",
              "hint": "What does this number represent?"
            },
            {
              "type": "replace-span",
              "clickable": "8:",
              "replacement": "len(\"replace \"):",
              "event": "c4e8a3d0-dce7-4044-a438-7976ddaeeefa",
              "explanation": "Magic numbers should be replaced with meaningful expressions",
              "hint": "What does this number represent?"
            },
            {
              "type": "text",
              "text": "\n"
            }
          ],
          "chat": {
            "buddy": "Finally I finished a wonderful piece of the excellent code. However, according to our team process, somebody should review it.\n\nAs it is already perfect, don't lose your time, just approve it!"
          }
        }
      ]
    },
    {
      "name": "Pythonic Code",
      "wisdoms": [
        {
          "id": "built-in-functions",
          "text": "Use Python's built-in functions instead of reinventing the wheel."
        },
        {
          "id": "list-comprehensions",
          "text": "List comprehensions and generator expressions are more concise and often more readable than loops."
        },
        {
          "id": "context-managers",
          "text": "Use context managers (with statement) for resource management."
        },
        {
          "id": "in-operator",
          "text": "The 'in' operator is a powerful and efficient way to check for membership."
        }
      ],
      "levels": [
        {
          "filename": "sum.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\"\"\"\nLook at these goood ooold looops!\n\"\"\"\n\ndef print_sum_and_min(values):\n"
            },
            {
              "type": "replace",
              "text": "    sum_all = 0\n    for i in values:\n        sum_all += i\n",
              "replacement": "    sum_all = sum(values)\n",
              "event": "sum_loop",
              "explanation": "Use built-in sum() function instead of manual loop",
              "hint": "Python has built-in functions for common operations"
            },
            {
              "type": "replace",
              "text": "    min_value = values[0]\n    for v in values[1:]:\n        if v < min_value:\n            min_value = v\n",
              "replacement": "    min_value = min(values)\n",
              "event": "min_loop",
              "explanation": "Use built-in min() function instead of manual loop",
              "hint": "Python has built-in functions for common operations"
            },
            {
              "type": "text",
              "text": "    print(f\"sum: {sum_all}, min: {min_value}\")\n"
            }
          ],
          "chat": {
            "buddy": ""
          }
        },
        {
          "filename": "csv_processing.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\"\"\"\nMeh... for, for, for... For what?!\n\"\"\"\ndef list_to_csv(nums):\n"
            },
            {
              "type": "replace",
              "text": "    csv = \"\"\n    for n in nums:\n        csv += str(n) + \",\"\n    if csv.endswith(\",\"):\n        csv = csv[:-1]\n    return csv\n",
              "replacement": "    return \",\".join(str(n) for n in nums)\n",
              "event": "csv_join",
              "explanation": "Use string join with generator expression instead of manual concatenation",
              "hint": "String concatenation in loops is inefficient"
            },
            {
              "type": "text",
              "text": "\ndef count_zeros(values):\n"
            },
            {
              "type": "replace",
              "text": "    count = 0\n    for v in values:\n        if v == 0:\n            count += 1\n    return count\n",
              "replacement": "    return sum(1 for v in values if v == 0)\n",
              "event": "count_zeros",
              "explanation": "Generator expressions — a powerful tool for counting",
              "hint": "Generator expressions. Heard of them?"
            },
            {
              "type": "text",
              "text": "\ndef uppercase_file(filename):\n"
            },
            {
              "type": "replace",
              "text": "    file_obj = open(filename, 'r', encoding='utf-8')\n    big_text = file_obj.read().upper()\n    file_obj.close()\n    return big_text\n",
              "replacement": "    with open(filename, 'r', encoding='utf-8') as f:\n        return f.read().upper()\n",
              "event": "with_open",
              "explanation": "Use `with` for file operations to ensure proper closure",
              "hint": "what if an error occurs?"
            },
            {
              "type": "text",
              "text": "\n\n\n\n\n\n\n"
            }
          ],
          "chat": {
            "buddy": ""
          }
        },
        {
          "filename": "search.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\"\"\"\nStop... `contains` again?! Haven't we already done this?\n\"\"\"\n\ndef contains(text, pattern):\n"
            },
            {
              "type": "replace",
              "text": "    pattern_len = len(pattern)\n    for i in range(len(text)):\n        if text[i:i+pattern_len] == pattern:\n            return True\n    return False\n",
              "replacement": "    # Do we really need this function?!\n    return pattern in text\n",
              "event": "in_operator",
              "explanation": "Use Python's 'in' operator instead of manual search",
              "hint": "No need to invent the wheel"
            },
            {
              "type": "text",
              "text": "\n"
            }
          ],
          "chat": {
            "buddy": ""
          }
        },
        {
          "filename": "unescape.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\"\"\"\nUnescape? Again?!\n\"\"\"\n\ndef unescape(text):\n"
            },
            {
              "type": "replace",
              "text": "    result = \"\"\n    escaping = False\n    for char in text:\n        if escaping:\n            if char == 'n':\n                result += '\\n'\n            elif char == 't':\n                result += '\\t'\n            elif char == '\\\\':\n                result += '\\\\'\n            # ... other escape sequences here...\n            else:\n                result += '\\\\' + char  # unknown escape — keep as-is\n            escaping = False\n        elif char == '\\\\':\n            escaping = True\n        else:\n            result += char\n    return result\n",
              "replacement": "    # Python rule 101: everything is already implemented in some standard function!\n    return text.encode('utf-8').decode('unicode_escape')\n",
              "event": "encode_decode",
              "explanation": "Built-in unicode_escape encoding handles unescaping! But first you need to convert the string to bytes",
              "hint": "Escaping and unescaping string is a common task..."
            },
            {
              "type": "text",
              "text": "\n"
            }
          ],
          "chat": {
            "buddy": ""
          }
        }
      ]
    }
  ]
}