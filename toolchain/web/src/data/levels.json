{
  "topics": [
    {
      "name": "Testing",
      "wisdoms": [
        {
          "id": "1",
          "text": "Поспешишь — QA-ев насмешишь!"
        },
        {
          "id": "2",
          "text": "Под лежачий прод бабло не течёт!"
        }
      ],
      "levels": [
        {
          "filename": "onboarding.py",
          "wisdoms": [
            "1",
            "2"
          ],
          "blocks": [
            {
              "type": "text",
              "text": "def foo():\n    print(42)\n\n\n"
            },
            {
              "type": "replace",
              "text": "def bar():\n    print(\"Hello bar!\")\n",
              "replacement": "def greet_user():\n    print(\"Hello\")\n",
              "event": "a02c4fde-723a-4545-a72c-7b145a4321db",
              "clickable": "bar",
              "explanation": "No Foos!"
            },
            {
              "type": "text",
              "text": "\n"
            },
            {
              "type": "replace",
              "text": "def BAD_CODE():\n    print(\"BAD\")\n",
              "replacement": "",
              "event": "BAD_CODE",
              "explanation": "Do not write bad code!"
            },
            {
              "type": "text",
              "text": "\n"
            },
            {
              "type": "replace-on",
              "text": "",
              "replacement": "def BAD_CODE():\n    print(\"GOOD\")\n",
              "event": "BAD_CODE"
            },
            {
              "type": "replace-span",
              "clickable": "foo",
              "replacement": "bar bar",
              "event": "fb567f09-accb-447f-86b3-5b31733c3e67",
              "explanation": "no foos",
              "hint": "Look at foo!"
            },
            {
              "type": "text",
              "text": "\n"
            },
            {
              "type": "replace-span",
              "clickable": "42",
              "replacement": "the_answer",
              "event": "e42",
              "explanation": "No Foos!",
              "hint": "42 = 6 * 8"
            }
          ]
        }
      ]
    },
    {
      "name": "Naming",
      "wisdoms": [
        {
          "id": "naming-good-names",
          "text": "Use descriptive names that convey intent."
        },
        {
          "id": "no-abbr",
          "text": "Don't use abbreviations unless they are well-known."
        },
        {
          "id": "sign-is-doc",
          "text": "Function arguments are documentation. Use meaningful names!"
        }
      ],
      "levels": [
        {
          "filename": "onboarding.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef main():\n    BaD_VAriABLE_NAME = \"Hello!\"\n    print(BaD_VAriABLE_NAME)\n"
            },
            {
              "type": "replace-span",
              "clickable": "BaD_VAriABLE_NAME",
              "replacement": "greeting",
              "event": "43fc29d8-86c6-415f-adfb-aa91dfd7eb11",
              "explanation": "Names should be meaningfull",
              "hint": "Click on bad variable name!"
            }
          ],
          "instructions": "Hello, Junior!\nAccording to our team process, you are not yet allowed to write code. So, you can only review a code of your colleagues and fix some small and not significant details.\n\nLet's train you a little. Look at this terrible variable name. Click to fix it!"
        },
        {
          "filename": "temperature.py",
          "wisdoms": [
            "no-abbr",
            "sign-is-doc"
          ],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef fmt_temp(idx, tt):\n    dnms = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    return \"Temperature for \" + dnms[idx] + \" is \" + tt + \"̈° C\"\n"
            },
            {
              "type": "replace-span",
              "clickable": "idx",
              "replacement": "day_of_week",
              "event": "a8c4b609-e200-49a0-8b06-3549f062e4e6",
              "explanation": "Argument name is a part of code documentation. It is important to make it meaningful",
              "hint": "%sign-is-doc"
            },
            {
              "type": "replace-span",
              "clickable": "tt",
              "replacement": "temperature",
              "event": "b81ef81c-1aa8-44f9-a7ea-46c2aea6be9a",
              "explanation": "%no-abbr",
              "hint": "%sign-is-doc"
            },
            {
              "type": "replace-span",
              "clickable": "dnms",
              "replacement": "day_names",
              "event": "fbf3310f-cf3e-456a-b1a5-3da2b941bc55",
              "explanation": "Vowels are happy now!",
              "hint": "Do you wnt hnts? yrwlcm!"
            },
            {
              "type": "replace-span",
              "clickable": "fmt_temp",
              "replacement": "format_temperature",
              "event": "a58e9efd-b549-4abc-b9ca-2f2a548a499c",
              "explanation": "Is temp for temporary?",
              "hint": "%sign-is-doc"
            }
          ],
          "instructions": "Okay, you are ready to some real work.\nCheck if this code is easy to understand."
        },
        {
          "filename": "cells.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef get(lst):\n    lst1 = []\n    for c in lst:\n        if c.is_empty: \n            lst1.Add(c.position)\n    return lst1\n\nlst = read_cells(\"cells.csv\")\nprint(get(lst))\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "get",
              "replacement": "get_empty_positions",
              "event": "8fea2be1-43d7-4b0e-b198-62684b70f0c0",
              "explanation": "Function name should describe what it does",
              "hint": "What does this function actually return?"
            },
            {
              "type": "replace-span",
              "clickable": "lst",
              "replacement": "cells",
              "event": "2032562e-7043-483b-a18a-bfde5f8d18a1",
              "explanation": "Use descriptive variable names",
              "hint": "What does this list contain?"
            },
            {
              "type": "replace-span",
              "clickable": "lst1",
              "replacement": "empty_positions",
              "event": "3a93151b-adb4-4d18-ac35-515c10070499",
              "explanation": "Use descriptive variable names",
              "hint": "What does this list store?"
            },
            {
              "type": "replace-span",
              "clickable": "c",
              "replacement": "cell",
              "event": "44ce4aea-7d99-413b-bcb9-cca923f8c146",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does each item in the list represent?"
            }
          ],
          "instructions": "Nice work! After your fixes code becomes much more readable. \nAnd this piece of code is realy short and simple.\nNot sure if it needs any changes."
        },
        {
          "filename": "views.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef get_views_per_second(views, date):\n    n = 24 * 60 * 60\n    daily_views = sum(1 for v in views if v.date == date)\n    return daily_views / 86400\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "86400",
              "replacement": "24*60*60",
              "event": "22050b4b-cb0f-4dca-a0ce-47291825c422",
              "explanation": "Magic numbers make code harder to understand",
              "hint": "What does this number represent?"
            },
            {
              "type": "replace-span",
              "clickable": "n",
              "replacement": "seconds_in_24h",
              "event": "fcc11e1c-5a2d-40d5-b30c-4d6e04790436",
              "explanation": "Variable names should be descriptive",
              "hint": "What does this variable represent?"
            }
          ],
          "instructions": "Do not change any constants here! They are magically calculated.\nNobody knows how, but everything works perfectly."
        },
        {
          "filename": "contains.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef contains(text, pattern):\n    l = len(pattern)\n    for i in range(len(text)):\n        if text[i:i+1] == pattern:\n            return True\n    return False\n\n# Hint for the future: never use lowercase 'l' as a variable name!\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "l",
              "replacement": "pattern_len",
              "event": "d67595e4-afa8-45a5-ac83-ca7af79a9229",
              "explanation": "Avoid using lowercase 'l' as a variable name as it can be confused with the number '1'",
              "hint": "What does this variable represent?"
            },
            {
              "type": "replace-span",
              "clickable": "i+1",
              "replacement": "i+l",
              "event": "e4aad286-102b-4923-bd06-e273853401e9",
              "explanation": "This is a bug! We need to use the pattern length, not just 1 character",
              "hint": "How many characters should we compare?"
            }
          ],
          "instructions": "Uhh.. Can't find a bug here... Can you help me a little?"
        },
        {
          "filename": "unescape.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef unescape(s):\n    ss = \"\"\n    flag = False\n    for c in s:\n        if flag and c == 'n':\n            ss += '\\n'\n        elif flag and c == 't':\n            ss += '\\t'\n        elif flag and c == '\\\\':\n            ss += '\\\\'\n        elif c == '\\\\':\n            flag = True\n        else:\n            ss += c\n    return ss\n\n# Hint for the future: do not use 'flag' as a variable name! \n# (unless it denoted real flags i.e. symbol of the country)\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "flag",
              "replacement": "after_slash",
              "event": "40005d02-8d82-481e-9e78-40f8617bf24b",
              "explanation": "Variable names should describe their purpose, not just their type",
              "hint": "What does this boolean flag actually indicate?"
            },
            {
              "type": "replace-span",
              "clickable": "ss",
              "replacement": "unescaped",
              "event": "f51acd34-62b0-4129-a20b-cd9308fc36d8",
              "explanation": "Single-letter variable names (or duplicates like 'ss') are rarely descriptive",
              "hint": "What does this string contain?"
            },
            {
              "type": "replace-span",
              "clickable": "s",
              "replacement": "escaped",
              "event": "1429473b-8b60-47ba-8945-b081dbf578e5",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this parameter represent?"
            }
          ],
          "instructions": "If a variable stores string, it is 's'. \nIf it stores a boolean, it is 'flag'.\nHowever, sometimes one also need 's1', 's2', etc. \nBut I personally prefer 'ss', 'sss', etc.\nBrilliant, isn't it?"
        },
        {
          "filename": "discount.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef is_discount_hunter(customer):\n    flag = True\n    for order in customer.orders:\n        flag2 = False\n        for item in order.items:\n            if item.product.discount > 0:\n                flag2 = True\n        flag = flag and flag2\n    return flag\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "flag",
              "replacement": "every_order_has_discounted_item",
              "event": "965ca40d-a2ae-4ef6-b0ca-b2e8adec93f5",
              "explanation": "Variable names should describe their purpose, not just their type",
              "hint": "What does this boolean flag actually track?"
            },
            {
              "type": "replace-span",
              "clickable": "flag2",
              "replacement": "has_discount",
              "event": "052fb5bd-29b4-494f-8159-be6cedd64a26",
              "explanation": "Numbered variables (flag2) are rarely descriptive",
              "hint": "What does this boolean flag indicate about the order?"
            }
          ],
          "instructions": "If we have already 'flag' and we need the second one, how should we name it?\nflag1 or flag2? What is your opinion?"
        },
        {
          "filename": "bigrams.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef GetBigramsFrequency(ws):\n    bigramsCount = len(ws) - 1\n    bigramsfrequency = {}\n    for I in range(bigramsCount):\n        bg = ws[I] + ' ' + ws[I + 1]\n        if bg in bigramsfrequency:\n            bigramsfrequency[bg] += 1\n        else:\n            bigramsfrequency[bg] = 1\n    return bigramsfrequency\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "GetBigramsFrequency",
              "replacement": "get_bigrams_frequency",
              "event": "7c232594-68ac-41f6-a1e3-0601ae59f303",
              "explanation": "Python functions should use snake_case naming style",
              "hint": "Function names in Python should be lowercase with underscores"
            },
            {
              "type": "replace-span",
              "clickable": "bigramsCount",
              "replacement": "bigrams_count",
              "event": "2fe7d591-44e5-48ca-a8af-c19a9e31cc88",
              "explanation": "Python variables should use snake_case naming style",
              "hint": "Variable names in Python should be lowercase with underscores"
            },
            {
              "type": "replace-span",
              "clickable": "I",
              "replacement": "i",
              "event": "d4e572ff-6aa2-4801-b8a6-ffdf8827c96f",
              "explanation": "Single-letter variables should be lowercase",
              "hint": "Loop counters are typically lowercase"
            },
            {
              "type": "replace-span",
              "clickable": "ws",
              "replacement": "words",
              "event": "4b83f7c8-65a1-4d9c-8e21-bbebb10ac435",
              "explanation": "Variable names should be descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "bg",
              "replacement": "bigram",
              "event": "a02ede9e-c00d-47a6-9901-7ae3e3231a34",
              "explanation": "Avoid abbreviations unless they are well-known",
              "hint": "What does this variable represent?"
            },
            {
              "type": "replace-span",
              "clickable": "bigramsfrequency",
              "replacement": "bigrams_frequency",
              "event": "ad8e3e87-4ed0-446d-b5d3-3ce300bbd3d7",
              "explanation": "Python variables should use snake_case naming style",
              "hint": "Variable names in Python should be lowercase with underscores"
            }
          ],
          "instructions": "Anders and Nicolaus wrote this code. \nTheir naming style is a little bit non typical for python..."
        },
        {
          "filename": "copy.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef copy(xs, ys, j, k, n):\n    \"\"\"Copy elements from ys to xs\n\n    Args:\n        xs - destination\n        ys - source\n        j - start index in xs\n        k - start index in ys\n        n - number of elements to copy\n    \"\"\"\n    for i in range(n):\n        xs[j+i] = ys[k+i]\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "xs",
              "replacement": "destination",
              "event": "e29ee731-fd3a-48fa-ad85-98143b7bf4d9",
              "explanation": "Variable names should be descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "ys",
              "replacement": "source",
              "event": "136df3b3-f841-48a1-b510-02df9065cc6c",
              "explanation": "Variable names should be descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "j",
              "replacement": "dest_start",
              "event": "fd78c83d-cb67-448f-bd76-c52f5b53865e",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "k",
              "replacement": "src_start",
              "event": "30f38ab8-dac7-4044-b665-520b3268c547",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "n",
              "replacement": "count",
              "event": "65dbbff8-7bf1-4a11-a616-3afb65240dc6",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this parameter represent?"
            }
          ],
          "instructions": "Huh, somebody wrote documentation for their code?! Weakling!\nReal coders don't read or write docs.\nThey read and write CODE!"
        },
        {
          "filename": "board.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef initialization(board_json):\n    n = board_json['size']\n    board = creating_board(n, n)\n    board_reader(board_json, board)\n\n# Hint for the future: functions = verbs, variables = nouns.\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "n",
              "replacement": "board_size",
              "event": "d3a6d1d6-c40d-466e-9043-8717a3f00d07",
              "explanation": "Variable names should be descriptive",
              "hint": "What does this variable represent?"
            },
            {
              "type": "replace-span",
              "clickable": "initialization",
              "replacement": "initialize_board",
              "event": "09b09fd8-fcf3-40ff-87ae-840071792e95",
              "explanation": "Function names should be verbs",
              "hint": "What action does this function perform?"
            },
            {
              "type": "replace-span",
              "clickable": "creating_board",
              "replacement": "create_board",
              "event": "f793f9fd-89dc-464b-be77-b6b09a9cc2f9",
              "explanation": "Function names should be verbs, not gerunds",
              "hint": "Use the imperative form for function names"
            },
            {
              "type": "replace-span",
              "clickable": "board_reader",
              "replacement": "read_board",
              "event": "36d0419b-f9bc-4df6-a291-1a85f01ebbff",
              "explanation": "Function names should be verbs",
              "hint": "What action does this function perform?"
            }
          ],
          "instructions": "It is simple: \n'initialization' consists of 'creating a board' and filling it with the 'board_reader'!"
        },
        {
          "filename": "final.py",
          "wisdoms": [],
          "blocks": [
            {
              "type": "text",
              "text": "\ndef InstructionParser(i):\n    Instructions = []\n    F = False\n    for l in i.splitlines():\n        if l.startswith(\"BEGIN\"):\n            F = True\n        if not F:\n            continue\n        if l.startswith(\"END\"):\n            F = False\n        elif l.startswith(\"replace \"):\n            rest = l[8:]\n            old, new = rest.split(\" with \")\n            Instructions.append((\"replace\", old, new))\n        elif l.startswith(\"add \"):\n            rest = l[4:]\n            Instructions.append((\"add\", rest))    \n        else:\n            raise Exception(\"Unknown instruction in line: \" + l)\n    return Instructions\n\n"
            },
            {
              "type": "replace-span",
              "clickable": "InstructionParser",
              "replacement": "parse_instructions",
              "event": "ef1f6ba1-d068-4f2b-9125-491ec7541b5a",
              "explanation": "Function names should be verbs and use snake_case in Python",
              "hint": "What does this function actually do?"
            },
            {
              "type": "replace-span",
              "clickable": "Instructions",
              "replacement": "instructions",
              "event": "8232a19a-b715-4742-afb2-6007214e5d96",
              "explanation": "Variable names should use snake_case in Python",
              "hint": "Consistent naming conventions make code more readable"
            },
            {
              "type": "replace-span",
              "clickable": "F",
              "replacement": "inside_begin_end",
              "event": "2cad5d46-7e31-4b8d-8bc5-de152529b0f8",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this boolean flag actually indicate?"
            },
            {
              "type": "replace-span",
              "clickable": "l",
              "replacement": "line",
              "event": "77904763-4c06-4923-821f-20c6be236661",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does each item in the loop represent?"
            },
            {
              "type": "replace-span",
              "clickable": "i",
              "replacement": "instructions_text",
              "event": "0fce2a60-4f7d-48ed-a625-c01453a17bb8",
              "explanation": "Single-letter variable names are rarely descriptive",
              "hint": "What does this parameter represent?"
            },
            {
              "type": "replace-span",
              "clickable": "4:",
              "replacement": "len(add ):",
              "event": "6fee393a-d166-460c-853d-80ca5b0efdfb",
              "explanation": "Magic numbers should be replaced with meaningful expressions",
              "hint": "What does this number represent?"
            },
            {
              "type": "replace-span",
              "clickable": "8:",
              "replacement": "len(replace ):",
              "event": "4c59b81d-2aad-434f-b7e9-cf22fa6d3019",
              "explanation": "Magic numbers should be replaced with meaningful expressions",
              "hint": "What does this number represent?"
            }
          ],
          "instructions": "Finally I finished a wonderful piece of the excellent code.\nHowever, according to our team process, somebody should review it.\nAs it is already perfect, don't lose your time, just approve it!"
        }
      ]
    }
  ]
}